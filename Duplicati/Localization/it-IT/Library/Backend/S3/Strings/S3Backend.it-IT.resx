<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AMZKeyDescriptionLong" xml:space="preserve">
    <value>La "Secret Access Key" di AWS può essere ottenuta dopo aver fatto accesso nel proprio account AWS, può anche essere fornita attraverso le proprietà "ftp-password"</value>
  </data>
  <data name="AMZKeyDescriptionShort" xml:space="preserve">
    <value>La "Secret Access Key" di AWS</value>
  </data>
  <data name="AMZUserIDDescriptionLong" xml:space="preserve">
    <value>La "Access Key ID" di AWS può essere ottenuta dopo aver fatto accesso nel proprio account AWS, può anche essere fornita attraverso le proprietà "ftp-password"</value>
  </data>
  <data name="AMZUserIDDescriptionShort" xml:space="preserve">
    <value>"Access Key ID" di AWS</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>Basato su Amazon S3</value>
  </data>
  <data name="FTPPasswordDescriptionLong" xml:space="preserve">
    <value>Password utilizzata per connettersi al server. Essa può anche essere fornita come variabile d'ambiente "FTP_PASSWORD".</value>
  </data>
  <data name="FTPPasswordDescriptionShort" xml:space="preserve">
    <value>Fornire la password utilizzata per la connessione al server</value>
  </data>
  <data name="DescriptionFTPUsernameLong" xml:space="preserve">
    <value>Il nome utente utilizzato per connettersi al server. Esso può anche essere fornito come variabile d'ambiente "FTP_USERNAME".</value>
  </data>
  <data name="DescriptionFTPUsernameShort" xml:space="preserve">
    <value>Fornire il nome utente utilizzato per la connessione al server</value>
  </data>
  <data name="NoAMZKeyError" xml:space="preserve">
    <value>No è stata fornita alcuna chiave segreta Amazon S3</value>
  </data>
  <data name="NoAMZUserIDError" xml:space="preserve">
    <value>No è stato fornito alcun userID Amazon S3</value>
  </data>
  <data name="S3EurobucketDescriptionLong" xml:space="preserve">
    <value>Questa flag viene utilizzata solo durante la creazione di nuovi bucket. Se il flag è impostato, il bucket viene creato su un server europeo. Questo flag forza il parametro "s3-use-new-style". Amazon mantiene costi leggermente maggiori per bucket Europei.</value>
  </data>
  <data name="S3EurobucketDescriptionShort" xml:space="preserve">
    <value>Utilizzare un server Europeo</value>
  </data>
  <data name="S3NewStyleDescriptionLong" xml:space="preserve">
    <value>Specificare questo argomento per fare in modo che il backend S3 utilizzi sottodomini piuttosto che il precedente metodo a prefisso url. Consultare la documentazione Amazon S3 per maggiori dettagli.</value>
  </data>
  <data name="S3NewStyleDescriptionShort" xml:space="preserve">
    <value>Utilizzare lo stile di chiamata a sottodominio</value>
  </data>
  <data name="UnableToDecodeBucketnameError" xml:space="preserve">
    <value>Impossibile determinare il nome del bucket per l'host: {0}</value>
  </data>
  <data name="S3UseRRSDescriptionLong" xml:space="preserve">
    <value>Questa flag attiva l'utilizzo dell'intestazione speciale RRS. Utilizzando RRS i file memorizzati hanno maggiori probabilità di scomparire rispetto a quelli memorizzati normalmente, ma il costo per la memorizzazione è inferiore. La descrizione completa è disponibile qui: http://aws.amazon.com/about-aws/whats-new/2010/05/19/announcing-amazon-s3-reduced-redundancy-storage/</value>
  </data>
  <data name="S3UseRRSDescriptionShort" xml:space="preserve">
    <value>Utilizzare l'Archiviazione a Ridondanza Ridotta</value>
  </data>
  <data name="DeprecatedUrlFormat" xml:space="preserve">
    <value>Si sta utilizzando un formato URL obsoleto, si prega di modificarlo così: {0}</value>
  </data>
  <data name="Description_v2" xml:space="preserve">
    <value>Questo backend può leggere e scrivere dati su un server compatibile con Amazon S3. I formati ammessi sono i seguenti: "s3://bucketname/prefix"</value>
  </data>
  <data name="OptionsAreMutuallyExclusiveError" xml:space="preserve">
    <value>Le opzioni --{0} e --{1} si escludono reciprocamente</value>
  </data>
  <data name="S3EurobucketDeprecationDescription" xml:space="preserve">
    <value>Prego utilizzare --{0}={1}</value>
  </data>
  <data name="S3LocationDescriptionLong" xml:space="preserve">
    <value>Questa opzione viene utilizzata solo durante la creazione di nuovi bucket. Utilizzare questa opzione per cambiare la regione nella quale i dati sono memorizzati in Amazon. Amazon mantiene costi leggermente maggiori per i bucket non-US. Localizzazioni di backet conosciute sono:
{0}</value>
  </data>
  <data name="S3LocationDescriptionShort" xml:space="preserve">
    <value>Specificare i vincoli per localizzazioni S3</value>
  </data>
  <data name="S3ServerNameDescriptionLong" xml:space="preserve">
    <value>Società diverse da Amazon ora supportano le API di S3, il che significa che questo back-end è in grado di leggere e scrivere dati anche verso questi provider. Utilizzare questa opzione per impostare il nome dell'host. Fornitori attualmente conosciuti sono:
{0}</value>
  </data>
  <data name="S3ServerNameDescriptionShort" xml:space="preserve">
    <value>Specificare un nome server S3 alternativo</value>
  </data>
  <data name="UnableToParseURLError" xml:space="preserve">
    <value>Impossibile analizzare la url: {0}</value>
  </data>
  <data name="S3NewStyleDeprecation" xml:space="preserve">
    <value>L'opzione chiamata a sottodominio non fa nulla, la libreria sceglierà la corretta convenzione di chiamata</value>
  </data>
  <data name="DescriptionUseSSLLong" xml:space="preserve">
    <value>Utilizzare questa flag per comunicare attraverso Secure Socket Layer (SSL) su HTTP (https). Si noti che i nomi dei bucket contenenti un punto hanno problemi con le connessioni SSL.</value>
  </data>
  <data name="DescriptionUseSSLShort" xml:space="preserve">
    <value>Fare in modo che Duplicati utilizzi una connessione SSL (https)</value>
  </data>
</root>