<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>Модуль шифрования GPG использует GNU Privacy Guard для шифрования и дешифрования файлов. Это требует, чтобы приложение gpg было доступно. В Windows предполагается, что оно находится в папке установки по умолчанию в Program Files, под Linux и OS X предполагается, что программа доступна через переменную окружения PATH. Можно указать путь к GPG с помощью ключа --gpg-program-path.</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>GNU Privacy Guard, внешняя</value>
  </data>
  <data name="GpgencryptiondecryptionswitchesLong" xml:space="preserve">
    <value>Используйте эту настройку для передачи дополнительных ключей GPG. Здесь нельзя указать ключ --passphrase-fd. Ключ --decrypt указывается всегда.</value>
  </data>
  <data name="GpgencryptiondecryptionswitchesShort" xml:space="preserve">
    <value>Дополнительные ключи командной строки GPG для расшифровки</value>
  </data>
  <data name="GpgencryptiondisablearmorLong" xml:space="preserve">
    <value>GPG Armor - это защищенный формат, используемый для хранения двоичных ключей в текстовом виде. По умолчанию при вызове GPG передается ключ --armor. Отметьте этот флаг, чтобы не передавался</value>
  </data>
  <data name="GpgencryptiondisablearmorShort" xml:space="preserve">
    <value>Не использовать GPG Armor</value>
  </data>
  <data name="GpgencryptionencryptionswitchesLong" xml:space="preserve">
    <value>В этом ключе можно задать дополнительные настройки GPG. Здесь нельзя указывать ключ --passphrase-fd. Ключ --encrypt указывается всегда.</value>
  </data>
  <data name="GpgencryptionencryptionswitchesShort" xml:space="preserve">
    <value>Дополнительные ключи шифрования в командной строке для GPG</value>
  </data>
  <data name="GPGExecuteError" xml:space="preserve">
    <value>Не получилось запустить GPG "{0}": {1}</value>
  </data>
  <data name="GpgprogrampathLong" xml:space="preserve">
    <value>Путь к GNU Privacy Guard. Если не указано, программа будет считать, что "gpg" is есть в каталогах, указанных в переменной среды PATH.</value>
  </data>
  <data name="GpgprogrampathShort" xml:space="preserve">
    <value>Путь к GnuPG</value>
  </data>
  <data name="SignkeyLong" xml:space="preserve">
    <value>The GNU Privacy Guard умеет подписывать тома специальным ключом. Эта функция сейчас не работает вместе с данной программой резервного копирования.</value>
  </data>
  <data name="SignkeyShort" xml:space="preserve">
    <value>Подписать ключ для GnuPG</value>
  </data>
  <data name="GPGNotFoundWarning" xml:space="preserve">
    <value>Программа не может проверить, если ли у вас приложение gpg. Несмотря на это, gpg может и запустится, если есть в каталоге, перечисленном в переменной окружения PATH. Если шифрование не заработает, файлы не будут копироваться. Продолжить?</value>
  </data>
  <data name="Gpgencryptiondisablearmordeprecated" xml:space="preserve">
    <value>Этот ключ нестандартно обрабатывается, используйте --{0} вместо него</value>
  </data>
  <data name="GpgencryptionenablearmorLong" xml:space="preserve">
    <value>Используйте этот ключ для передачи ключа --armor программе GPG. Файлы будут немного больше, но их можно будет отправлять как текст.</value>
  </data>
  <data name="GpgencryptionenablearmorShort" xml:space="preserve">
    <value>Использовать GPG Armor</value>
  </data>
</root>