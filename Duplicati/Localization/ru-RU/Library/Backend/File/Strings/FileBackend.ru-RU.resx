<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlternateDestinationMarkerLong" xml:space="preserve">
    <value>Эта настройка работает только если указана вместе с ключом --{0}. Если есть альтернативные пути, этот параметр указывает имя файла маркера, который должен быть в папке. Это может быть использовано для обработки ситуаций, когда для внешнего диска меняется буква диска или точка монтирования. Если файл маркера существует, это маркирует диск как нужный, и так можно предотвратить запись данных на нежелательный внешний диск.Содержимое файла неважно, проверяется только существование файла.</value>
  </data>
  <data name="AlternateDestinationMarkerShort" xml:space="preserve">
    <value>Проверить наличие файла в папке назначения</value>
  </data>
  <data name="AlternateTargetPathsLong" xml:space="preserve">
    <value>Эта настройка  позволяет указать несколько мест, куда надо копировать данные. Основной путь ставится перед списком путей, указанных здесь. Перед началом резервного копирования, каждая папка в списке проверяется на существование и проверяется наличие файлов-маркеров, если это указано в --{0}. Первый существующий путь, который необязательно содержит маркерный файл затем используется в качестве пути назначения. Несколько путей должны быть разделены {1}. В Windows можно использовать имя UNC, а буква диска может быть замещена звездочкой (*), например: "*.: \backup", тогда будут проверены все буквы дисков. Если имя пользователя и пароль не указаны, одни и те же учетные данные используются для всех вариантов путей.</value>
  </data>
  <data name="AlternateTargetPathsShort" xml:space="preserve">
    <value>Список дополнительных путей назначения</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Модуль может читать и писать данные в хранилище, основанное на файлах. Допустимые форматы адреса: "file://hostname/folder" или "file://username:password@hostname/folder". Можно указать путь в формате UNC (например, "file://\\server\folder") или локальный путь (например, (win) "file://c:\folder", (linux) "file:///usr/pub/files")</value>
  </data>
  <data name="DescriptionFTPPasswordLong" xml:space="preserve">
    <value>Пароль для соединения с сервером. Может быть записан в переменной окружения "FTP_PASSWORD".</value>
  </data>
  <data name="DescriptionFTPPasswordShort" xml:space="preserve">
    <value>Пароль для соединения с сервером. </value>
  </data>
  <data name="DescriptionFTPUsernameLong" xml:space="preserve">
    <value>Логин для соединения с сервером. Может быть записан в переменной окружения "FTP_USERNAME".</value>
  </data>
  <data name="DescriptionFTPUsernameShort" xml:space="preserve">
    <value>Логин для соединения с сервером</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>Копирование в файл</value>
  </data>
  <data name="FolderMissingError" xml:space="preserve">
    <value>Папки {0} нет</value>
  </data>
  <data name="NoDestinationWithMarkerFileError" xml:space="preserve">
    <value>Файл-маркер "{0}" не найден ни в одном проверенном хранилище: {1}</value>
  </data>
  <data name="UseMoveForPutLong" xml:space="preserve">
    <value>При сохранении файла обычно вначале файл копируется, а затем оригинал удаляется. В этом случае операцию можно повторить, если что-то пошло не так. Если этот флаг активировать, повтор может не получиться. Флаг не учитывается, если не активирован флаг --disable-streaming-transfers.</value>
  </data>
  <data name="UseMoveForPutShort" xml:space="preserve">
    <value>Перенести файл вместо копирования</value>
  </data>
</root>