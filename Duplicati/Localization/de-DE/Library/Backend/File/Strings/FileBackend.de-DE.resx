<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlternateDestinationMarkerLong" xml:space="preserve">
    <value>Diese Option funktioniert nur, wenn auch die --{0} Option angegeben ist. Wenn alternative Pfade angegeben werden, zeigt diese Option den Namen einer Kennzeichnungs-Datei, die im Ordner vorhanden sein muss. Damit kann man auch Sonderfälle beherrschen, wenn ein externes Laufwerk den Laufwerksbuchstaben oder Mount-Punkt ändert. Durch die Absicherung, dass eine bestimmte Datei vorhanden sein muss, kann man das Schreiben von Daten zu einem unerwünschten externen Laufwerk verhindern. Der Inhalt der Kennzeichnungs-Datei wird nie untersucht, nur das Vorhandensein der Datei.
</value>
  </data>
  <data name="AlternateDestinationMarkerShort" xml:space="preserve">
    <value>Eine Datei im Zielordner suchen</value>
  </data>
  <data name="AlternateTargetPathsLong" xml:space="preserve">
    <value>Diese Option ermöglicht es, dass mehrere Ziele angegeben werden. Der primäre Ziel-Pfad wird vor der Liste von Pfaden platziert, welche mit dieser Option angegeben wird. Vor dem Start der Sicherung wird jeder Ordner in der Liste auf seine Existenz und gegebenenfalls auf das Vorhandensein der Kennzeichnungs-Datei geprüft, welche mit --{0} angegeben wurde. Die ersten vorhandene Pfad, der gegebenenfalls die Kennzeichnungs-Datei enthält, wird dann als Ziel verwendet. Mehrere Ziele werden mit einem {1} getrennt. Unter Windows kann der Pfad ein UNC-Pfad sein, und die Laufwerksbuchstaben können mit einem Stern ersetzt werden (*), z.B. "*:\Backup", womit alle Laufwerksbuchstaben geprüft werden. Wenn Sie einen Benutzernamen und ein Passwort angeben, werden dieselben Zugangsdaten für alle Destinationen verwendet.
</value>
  </data>
  <data name="AlternateTargetPathsShort" xml:space="preserve">
    <value>Eine Liste zusätzlicher Zielordner</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Dieses Sicherungsziel kann Daten von/zu einem Datei-basierten Speicher übertragen. Erlaubte Formate sind "file://hostname/ordner" oder "file://benutzername:kennwort@hostname/ordner". Sie können auch UNC-Pfade (z.B. "file://\\server\ordner") oder lokale Ordner (z.B. Windows "file://c:\ordner", Linux "file:///usr/pub/dateien") verwenden</value>
  </data>
  <data name="DescriptionFTPPasswordLong" xml:space="preserve">
    <value>Das Kennwort für die Server-Verbindung. Dieses kann auch über die Umgebungsvariable "FTP_PASSWORD" angegeben werden.</value>
  </data>
  <data name="DescriptionFTPPasswordShort" xml:space="preserve">
    <value>Gibt das Kennwort für die Server-Verbindung an</value>
  </data>
  <data name="DescriptionFTPUsernameLong" xml:space="preserve">
    <value>Der Benutzername für die Server-Verbindung. Dieser kann auch über die Umgebungsvariable "FTP_USERNAME" angegeben werden.</value>
  </data>
  <data name="DescriptionFTPUsernameShort" xml:space="preserve">
    <value>Gibt den Benutzernamen für die Server-Verbindung an</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>Datei-basierend</value>
  </data>
  <data name="FolderMissingError" xml:space="preserve">
    <value>Der Ordner {0} existiert nicht.</value>
  </data>
  <data name="NoDestinationWithMarkerFileError" xml:space="preserve">
    <value>Das Kontrollfile "{0}" wurde in den nachfolgenden Zielen nicht gefunden: {1}</value>
  </data>
  <data name="UseMoveForPutLong" xml:space="preserve">
    <value>Wenn Dateien gespeichert werden, ist die Standardoperation sie erst zu kopieren und dann das Original zu löschen. Dieses Vorgehen erlaubt es, eine Operation noch einmal durchzuführen, wenn sie gescheitet sein sollte. Wird diese Option aktiviert, kann ein erneuter Versuch fehlschlagen. Diese Option hat keinen Effekt, sofern die Option --disable-streaming-transfers nicht aktiv ist.</value>
  </data>
  <data name="UseMoveForPutShort" xml:space="preserve">
    <value>Die Datei verschieben, anstatt sie zu kopieren</value>
  </data>
</root>