<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>Unterstützt Verbindungen zu einem WebDAV-fähigen Web-Server mittels http-Protokoll. Erlaubte Formate sind "webdav://hostname/ordner" oder "webdav://benutzername:kennwort@hostname/ordner"</value>
  </data>
  <data name="DescriptionForceDigestLong" xml:space="preserve">
    <value>Die HTTP-Authentifizierungsmethode "Digest" erlaubt es, sich am Server anzumelden, ohne das Kennwort im Klartext zu senden. Ein Man-in-the-middle-Angriff wäre allerdings trotzdem einfach, denn das HTTP-Protokoll erlaubt einen Rückgriff auf einfache Anmeldung, wodurch das Kennword an den Angreifer gesendet würde. Wird diese Option gesetzt, akzeptiert der Client dies nicht und wird immer "Digest"-Authentifizierung benutzen oder keine Verbindung herstellen.</value>
  </data>
  <data name="DescriptionForceDigestShort" xml:space="preserve">
    <value>Erzwinge die Benutzung der HTTP-Authentifizierungsmethode "Digest"</value>
  </data>
  <data name="DescriptionFTPPasswordLong" xml:space="preserve">
    <value>Das Kennwort für die Server-Verbindung. Dieses kann auch über die Umgebungsvariable "FTP_PASSWORD" angegeben werden.</value>
  </data>
  <data name="DescriptionFTPPasswordShort" xml:space="preserve">
    <value>Gibt das Kennwort für die Server-Verbindung an</value>
  </data>
  <data name="DescriptionFTPUsernameLong" xml:space="preserve">
    <value>Der Benutzername für die Server-Verbindung. Dieser kann auch über die Umgebungsvariable "FTP_USERNAME" angegeben werden.</value>
  </data>
  <data name="DescriptionFTPUsernameShort" xml:space="preserve">
    <value>Gibt den Benutzernamen für die Server-Verbindung an</value>
  </data>
  <data name="DescriptionIntegratedAuthenticationLong" xml:space="preserve">
    <value>Wenn sowohl Server als auch Client die Windows-integrierte Anmeldung unterstützen, kann sie mit dieser Option eingeschaltet werden. Dies wird höchstwahrscheinlich nur mit Windows-Servern und -Clients funktionieren.</value>
  </data>
  <data name="DescriptionIntegratedAuthenticationShort" xml:space="preserve">
    <value>Benutze Windows-integrierte Anmeldung für die Server-Verbindung</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>WebDAV-basierend</value>
  </data>
  <data name="MissingFolderError" xml:space="preserve">
    <value>Der Ordner {0} wurde nicht gefunden, Nachricht: {1}</value>
  </data>
  <data name="SeenThenNotFoundError" xml:space="preserve">
    <value>Bei der Auflistung des Ordners {0} war die Datei {1} enthalten, aber der Server meldet nun, dass die Datei nicht gefunden wird. Dies kann als Ursache haben, dass die Datei gelöscht wurde oder nicht verfügbar ist, aber es kann auch sein, dass die Datei-Endung {2} vom Web-Server blockiert wird. IIS blockiert unbekannte Erweiterungen standardmäßig. Fehlermeldung: {3}</value>
  </data>
  <data name="DescriptionUseSSLLong" xml:space="preserve">
    <value>Diese Option schaltet SSL (Secure Socket Layer - sicheres Übertragungsprotokoll) für die HTTP-Verbindung ein (https).</value>
  </data>
  <data name="DescriptionUseSSLShort" xml:space="preserve">
    <value>Verwende eine SSL-Verbindung (https)</value>
  </data>
  <data name="DescriptionDebugPropfindLong" xml:space="preserve">
    <value>Zur Unterstützung bei Debugging Vorgängen ist es möglich, einen Pfad zu einer Datei anzugeben, die  mit der PROPFIND Antwort überschrieben wird</value>
  </data>
  <data name="DescriptionDebugPropfindShort" xml:space="preserve">
    <value>Speicherauszug der PROPFIND Antwort</value>
  </data>
</root>