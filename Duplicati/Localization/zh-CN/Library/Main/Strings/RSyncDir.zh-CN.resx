<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateFolderError" xml:space="preserve">
    <value>创建目录失败: "{0}", 错误信息是: {1}</value>
  </data>
  <data name="DeletedFilenameError" xml:space="preserve">
    <value>判断文件状态时出错，文件名: {0}, 目录名:{1}</value>
  </data>
  <data name="DeleteFileError" xml:space="preserve">
    <value>删除文件失败: "{0}", 错误信息: {1}</value>
  </data>
  <data name="DeleteFolderError" xml:space="preserve">
    <value>删除文件夹失败: "{0}", 错误信息: {1}</value>
  </data>
  <data name="FileProcessError" xml:space="preserve">
    <value>处理文件失败： {0}. 错误信息: {1}</value>
  </data>
  <data name="FileToDeleteMissingError" xml:space="preserve">
    <value>标记为删除的文件并不存在： {0}</value>
  </data>
  <data name="FolderToDeleteMissingError" xml:space="preserve">
    <value>您要删除的目录不存在：{0}</value>
  </data>
  <data name="MultipassUsageError" xml:space="preserve">
    <value>Multi pass没有初始化</value>
  </data>
  <data name="RestoreFileError" xml:space="preserve">
    <value>文件恢复失败： “{0}”，错误信息： {1}</value>
  </data>
  <data name="RestoreFolderDeltaError" xml:space="preserve">
    <value>文件夹在预恢复时不存在: {0}</value>
  </data>
  <data name="RestoreFolderMissingError" xml:space="preserve">
    <value>文件夹在恢复时不存在: {0}</value>
  </data>
  <data name="FileShouldBePartialError" xml:space="preserve">
    <value>文件{0}在前一个卷中被标记为破损，但是在当前卷中没有做此标记</value>
  </data>
  <data name="InvalidPartialFileEntry" xml:space="preserve">
    <value>文件{0}的破损文件记录与文件并不相符</value>
  </data>
  <data name="InvalidPartialRecordError" xml:space="preserve">
    <value>破损文件记录无效</value>
  </data>
  <data name="PartialFileAddedLogMessage" xml:space="preserve">
    <value>文件{0} 从字节 {1}开始不完整</value>
  </data>
  <data name="PartialFileIncompleteWarning" xml:space="preserve">
    <value>破损文件{0} 不完整</value>
  </data>
  <data name="PartialLeftoverDeleteError" xml:space="preserve">
    <value>无法清空破损文件 {0}, 错误信息: {1}</value>
  </data>
  <data name="InternalPathMappingError" xml:space="preserve">
    <value>内部错误。路径 {0} 并不是任何一个源文件夹的子目录: {1}.</value>
  </data>
  <data name="SnapshotFailedError" xml:space="preserve">
    <value>创建快照失败: {0}</value>
  </data>
  <data name="FailedToSetFileWriteTime" xml:space="preserve">
    <value>设置文件写时间失败: {0}.
错误信息: {1}</value>
  </data>
  <data name="FailedToSetFolderWriteTime" xml:space="preserve">
    <value>设置文件夹写时间失败： {0}.
错误信息： {1}</value>
  </data>
  <data name="UsnDisposeFailedWarning" xml:space="preserve">
    <value>创建USN辅助类失败: {0}</value>
  </data>
  <data name="UsnFailedError" xml:space="preserve">
    <value>读取USN数据失败: {0}</value>
  </data>
  <data name="UsnJournalIdChangedWarning" xml:space="preserve">
    <value>卷 {0} 的USN journalId 从 {1} 变为了 {2}, 执行完整文件比较</value>
  </data>
  <data name="UsnNotSupportedOnLinuxError" xml:space="preserve">
    <value>USN 在Linux系统上不被支持</value>
  </data>
  <data name="UsnNumberingFaultWarning" xml:space="preserve">
    <value>存储的卷 {0}的USN值是 {1}，但是当前的USN值是{2}，执行完整文件比较</value>
  </data>
  <data name="FileChangedWhileReadError" xml:space="preserve">
    <value>文件 {0} 在备份时改变了，从备份集合中忽略此文件</value>
  </data>
  <data name="FileChangedWhileReadWarning" xml:space="preserve">
    <value>文件 {0} 在备份时改变了，这有可能导致一个破损文件</value>
  </data>
  <data name="FolderModificationTimeReadError" xml:space="preserve">
    <value>读取文件修改时间标签失败: {0}.
错误信息: {1}</value>
  </data>
  <data name="InvalidTimeStampError" xml:space="preserve">
    <value>文件 {0}的时间标签无法读取: {1}</value>
  </data>
  <data name="SymlinkReadError" xml:space="preserve">
    <value>The symlink information for {0} could not be read: {1}</value>
  </data>
  <data name="InvalidRelFilenameError" xml:space="preserve">
    <value>Invalid filename detected: {0}, source folders: {1}, error message: {2}</value>
  </data>
</root>