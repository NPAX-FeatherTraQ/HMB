<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlternateDestinationMarkerLong" xml:space="preserve">
    <value>Esta opção funciona somente quando a opção --{0} também for especificada. Se pastas alternativas forem especificadas, esta opção indica o nome do arquivo que deve existir nesta pasta. Isto pode ser usado para lidar com situações onde um drive externo muda sua letra ou ponto de montagem. Verificando a existência deste arquivo, é possível prevenir o armazenamento de dados em um dispositivo externo indesejado. O conteúdo do arquivo nunca é verificado, somente seu nome.</value>
  </data>
  <data name="AlternateDestinationMarkerShort" xml:space="preserve">
    <value>Verificar a existência de um arquivo na pasta de destino</value>
  </data>
  <data name="AlternateTargetPathsLong" xml:space="preserve">
    <value>Esta opção permite que multiplos alvos sejam especificados. O primeiro caminho é definido antes da lista de caminhos fornecidos por esta opção. Antes de iniciar o backup, cada pasta na lista é verificada pela existência do arquivo marcador fornecido com a opção --{0}. O primeiro caminho que opcionalmente contiver o arquivo marcador é utilizado como destino. Multiplos destinos são separados com um {1},. No Windows, o caminho pode ser definido como um UNC, e a letra da unidade pode ser substituida por um asterisco (*), ex.: "*:\backup", irá examinar todas as unidades. Se um usuário e senha forem fornecidos, as mesmas credenciais serão utilizadas para todos os destinos.</value>
  </data>
  <data name="AlternateTargetPathsShort" xml:space="preserve">
    <value>Uma lista de cominhos secundários</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Este protocolo pode ler e escrever dados utilizando arquivos. O formato permitido é "file://nomedohost/pasta" ou "file://usuario:senha@nomedohost/pasta". Você pode informar também caminhos UNC (ex: "file://\\servidor\pasta") ou caminhos locais (ex: (win) "file://c:\pasta", (linux) "file:///usr/pub/arquivos")</value>
  </data>
  <data name="DescriptionFTPPasswordLong" xml:space="preserve">
    <value>A senha utilizada para conectar no servidor. Este parâmetro também pode ser informado através da variável de ambiente "FTP_PASSWORD".</value>
  </data>
  <data name="DescriptionFTPPasswordShort" xml:space="preserve">
    <value>Provê a senha utilizada para conectar ao servidor</value>
  </data>
  <data name="DescriptionFTPUsernameLong" xml:space="preserve">
    <value>O usuário utilizado para conectar no servidor. Também pode ser fornecido através da variável de ambiente "FTP_USERNAME".</value>
  </data>
  <data name="DescriptionFTPUsernameShort" xml:space="preserve">
    <value>Fornece o usuário utilizado para se conectar ao servidor.</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>Baseado em arquivo</value>
  </data>
  <data name="FolderMissingError" xml:space="preserve">
    <value>A pasta {0} não existe</value>
  </data>
  <data name="NoDestinationWithMarkerFileError" xml:space="preserve">
    <value>O arquivo de referência "{0}" não foi encontrado em nenhum dos destinos examinados: {1}</value>
  </data>
  <data name="UseMoveForPutLong" xml:space="preserve">
    <value>Quando armazenar o arquivo, a operação padrão é copiar o arquivo e apagar o original. Esta sequência garante que a operação pode ser refeita se algo der errado. Ativando esta opção pode resultar em erro caso seja necessário refazer a cópia. Esta opção não tem efeito a não ser que a opção --disable-streaming-transfers esteja ativada.</value>
  </data>
  <data name="UseMoveForPutShort" xml:space="preserve">
    <value>Mover o arquivo ao invés de copiá-lo</value>
  </data>
</root>