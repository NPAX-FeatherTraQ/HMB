<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>Suporta conexões a um servidor web com suporte a WEBDAV, usando o protocolo HTTP. Os formatos permitidos são "webdav://nomedohost/pasta" ou "webdav://usuario:senha@nomedohost/pasta".</value>
  </data>
  <data name="DescriptionForceDigestLong" xml:space="preserve">
    <value>Utilizando o método de autenticação HTTP digest permite que o usuário se autentique no servidor sem enviar a senha em texto puro. Entretanto, um ataque de interceptação é simples, pois o protocolo HTTP especifica a utilização da autenticação básica, o que fará com que o cliente envie a senha ao atacante. Utilizando esta opção, fará com que sempre seja utilizado método de autenticação Digest ou haverá uma falha na conexão.</value>
  </data>
  <data name="DescriptionForceDigestShort" xml:space="preserve">
    <value>Forçar a utilização do método de autenticação HTTP Digest</value>
  </data>
  <data name="DescriptionFTPPasswordLong" xml:space="preserve">
    <value>A senha utilizada para se conectar ao servidor. Este parâmetro pode ser informado através do uso da variável de ambiente "FTP_PASSWORD".</value>
  </data>
  <data name="DescriptionFTPPasswordShort" xml:space="preserve">
    <value>Provê a senha utilizada na conexão com o servidor</value>
  </data>
  <data name="DescriptionFTPUsernameLong" xml:space="preserve">
    <value>O usuário utilizado para conectar ao servidor. Também pode ser fornecido como a variável de ambiente "FTP_USERNAME".</value>
  </data>
  <data name="DescriptionFTPUsernameShort" xml:space="preserve">
    <value>Fornece o usuário utilizado para se conectar ao servidor.</value>
  </data>
  <data name="DescriptionIntegratedAuthenticationLong" xml:space="preserve">
    <value>Se o servidor e o cliente suportarem autenticação integrada, esta opção ativa este método de autenticação. Está opção está disponível em servidores e clientes windows.</value>
  </data>
  <data name="DescriptionIntegratedAuthenticationShort" xml:space="preserve">
    <value>Utilizar a autenticação integrada do windows para se conectar ao servidor</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>Baseado em WEBDAV</value>
  </data>
  <data name="MissingFolderError" xml:space="preserve">
    <value>A pasta {0} não foi encontrada, mensagem: {1}</value>
  </data>
  <data name="SeenThenNotFoundError" xml:space="preserve">
    <value>Ao listar a pasta {0} o arquivo {1} foi listado, mas o servidor está reportando que o arquivo não foi encontrado.
O arquivo pode ter sido apagado ou está indisponível, mas também pode ser devido à extensão {2} estar bloqueada no servidor web. O IIS bloqueia extensões desconhecidas por padrão.
Mensagem de erro: {3}</value>
  </data>
  <data name="DescriptionUseSSLLong" xml:space="preserve">
    <value>Utilize esta opção para se comunicar utilizando SSL sobre http (https).</value>
  </data>
  <data name="DescriptionUseSSLShort" xml:space="preserve">
    <value>Instrui o Duplicati a utilizar uma conexão SSL (https)</value>
  </data>
  <data name="DescriptionDebugPropfindLong" xml:space="preserve">
    <value>Para ajudar na depuração de problemas, é possível definir o caminho para um arquivo que será sobrescrito com a resposta PROPFIND</value>
  </data>
  <data name="DescriptionDebugPropfindShort" xml:space="preserve">
    <value>Despejar a resposta PROPFIND</value>
  </data>
</root>