<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelExceptionError" xml:space="preserve">
    <value>Cancelado</value>
  </data>
  <data name="ConfigurationIsMissingItemError" xml:space="preserve">
    <value>A configuração para o armazenamento não é válida, está faltando o campo {0}</value>
  </data>
  <data name="ConfirmTestConnectionQuestion" xml:space="preserve">
    <value>Você quer testar a conexão?</value>
  </data>
  <data name="ConnectionFailure" xml:space="preserve">
    <value>Conexão falhou: {0}</value>
  </data>
  <data name="ConnectionSuccess" xml:space="preserve">
    <value>Sucesso na conexão!</value>
  </data>
  <data name="DefaultDirectoryWarning" xml:space="preserve">
    <value>Você não informou um caminho. Isto irá armazenar todos backups no diretório padrão. Deseja continuar mesmo assim?</value>
  </data>
  <data name="EmptyPasswordError" xml:space="preserve">
    <value>Você precisa definir uma senha</value>
  </data>
  <data name="EmptyPasswordWarning" xml:space="preserve">
    <value>Você não informou uma senha.
Continuar assim mesmo?</value>
  </data>
  <data name="EmptyServernameError" xml:space="preserve">
    <value>Você precisa inserir o nome do servidor</value>
  </data>
  <data name="EmptyUsernameError" xml:space="preserve">
    <value>Você precisa inserir o nome do usuário</value>
  </data>
  <data name="EmptyUsernameWarning" xml:space="preserve">
    <value>Você não informou um nome de usuário.
Se o servidor aceitar uploads anônimos tudo bem, mas provavelmente um usuário será requerido
Proceder sem um usuário?</value>
  </data>
  <data name="ExistingBackupDetectedQuestion" xml:space="preserve">
    <value>A conexão funcionou mas foi encontrado outro backup na pasta de destino. É possível configurar o Duplicati para armazenar multiplos backups na mesma pasta, mas não é recomendado.

Deseja utilizar a pasta selecionada?</value>
  </data>
  <data name="FolderAlreadyExistsError" xml:space="preserve">
    <value>A pasta não pode ser criada pois ele já existe</value>
  </data>
  <data name="FolderCreated" xml:space="preserve">
    <value>Pasta criada!</value>
  </data>
  <data name="FolderMissingError" xml:space="preserve">
    <value>A pasta solicitada não existe</value>
  </data>
  <data name="InvalidServernameError" xml:space="preserve">
    <value>O servidor "{0}" não é válido</value>
  </data>
</root>