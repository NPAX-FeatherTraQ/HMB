<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedFoldersHeader" xml:space="preserve">
    <value>Pastas adicionadas</value>
  </data>
  <data name="CollectionStatusHeader" xml:space="preserve">
    <value>Foram encontrados {0} backup no armazenamento

Tipo\tHora\t\t\tVolume\tTamanho</value>
  </data>
  <data name="CollectionStatusLineFull" xml:space="preserve">
    <value>Completo\t{0}\t{1}\t{2}</value>
  </data>
  <data name="CollectionStatusLineInc" xml:space="preserve">
    <value> Inc\t{0}\t{1}\t{2}</value>
  </data>
  <data name="ControlFilesHeader" xml:space="preserve">
    <value>Arquivos de controle</value>
  </data>
  <data name="DeletedFilesHeader" xml:space="preserve">
    <value>Arquivos removidos</value>
  </data>
  <data name="DeletedFoldersHeader" xml:space="preserve">
    <value>Pastas removidas</value>
  </data>
  <data name="DuplicatiOptionsHeader" xml:space="preserve">
    <value>Opções do Duplicati:</value>
  </data>
  <data name="FailedToParseParametersFileError" xml:space="preserve">
    <value>Unable to read the parameters file "{0}", reason: {1}</value>
  </data>
  <data name="FileEntryNotFound" xml:space="preserve">
    <value>&lt; não encontrado &gt;</value>
  </data>
  <data name="FiltersCannotBeUsedWithFileError" xml:space="preserve">
    <value>Filters cannot be specified on the commandline if filters are also present in the parameter file</value>
  </data>
  <data name="FindLastVersionEntry" xml:space="preserve">
    <value>{0}\t{1}</value>
  </data>
  <data name="FindLastVersionHeader" xml:space="preserve">
    <value>Tempo de Backup\t\tArquivo</value>
  </data>
  <data name="FolderCreatedMessage" xml:space="preserve">
    <value>Foi criado o diretório {0}</value>
  </data>
  <data name="GenericModulesHeader" xml:space="preserve">
    <value>Módulos genéricos suportados:</value>
  </data>
  <data name="IntegerParseError" xml:space="preserve">
    <value>Não foi possível converter "{0}" em um número</value>
  </data>
  <data name="InternalOptionUsedError" xml:space="preserve">
    <value>A opção --{0} é reservada para uso interno e não pode ser utilizada na linha de comando</value>
  </data>
  <data name="ModifiedFilesHeader" xml:space="preserve">
    <value>Arquivos modificados</value>
  </data>
  <data name="ModuleIsLoadedAutomatically" xml:space="preserve">
    <value>Utilize --disable-module para desativar um módulo, caso contrário ele será carregado automaticamente</value>
  </data>
  <data name="ModuleIsNotLoadedAutomatically" xml:space="preserve">
    <value>O módulo não foi carregado automaticamente, utilize --enable-module para carregá-lo</value>
  </data>
  <data name="NewFilesHeader" xml:space="preserve">
    <value>Arquivos novos</value>
  </data>
  <data name="NewOrModifiedFilesHeader" xml:space="preserve">
    <value>Arquivos novos/modificados</value>
  </data>
  <data name="ParametersFileOptionLong" xml:space="preserve">
    <value>This option can be used to store some or all of the options given to the commandline client. The file must be a plain text file, UTF-8 encoding is preferred. Each line in the file should be of the format --option=value. The special options --source and --target can be used to override the localpath and the remote destination uri, respectively. The options in this file take precedence over the options provided on the commandline. You cannot specify filters in both the file and on the commandline.</value>
  </data>
  <data name="ParametersFileOptionShort" xml:space="preserve">
    <value>Path to a file with parameters</value>
  </data>
  <data name="ProgramUsageBackend" xml:space="preserve">
    <value>Um &lt;armazenamento&gt; é identificado por uma url como ftp://host/ ou ssh://server/.
 Utilizando este sistema, Duplicati pode detectar se você quer fazer um backup ou restauração.
 Os comandos para apagar e limpar não apagam os arquivos, a não ser que a opção --force seja especificada, desta maneira é possível verificar quais arquivos são afetados, antes de efetivamente apagá-los.
 O comando cleanup não deve ser utilizado a não ser que um backup tenha sido interrompido e deixado arquivos parciais. Duplicati irá informar caso isso ocorra.
 O comando delete pode ser usado para remover backups antigos quando novos estiverem presentes.</value>
  </data>
  <data name="ProgramUsageBackup" xml:space="preserve">
    <value>Backup (realizar um backup completo ou incremental):
  Duplicati.CommandLine [completo] [opções] &lt;pasta-origem&gt; &lt;armazenamento&gt;</value>
  </data>
  <data name="ProgramUsageCleanup" xml:space="preserve">
    <value>Cleanup (remove arquivos parciais e sem uso):
  Duplicati.CommandLine cleanup [opções] &lt;armazenamento&gt;</value>
  </data>
  <data name="ProgramUsageCreateFolders" xml:space="preserve">
    <value>Criar pasta (normalmente realizado automaticamente):
  Duplicati.CommandLine create-folder [opções] &lt;armazenamento&gt;</value>
  </data>
  <data name="ProgramUsageDeleteOld" xml:space="preserve">
    <value>Apagar backups antigos:
  Duplicati.CommandLine delete-all-but-n-full &lt;quantidade de backups completos a manter&gt; [opções] &lt;backend&gt;
  Duplicati.CommandLine delete-older-than &lt;idade maxima permitida&gt; [opções] &lt;armazenamento&gt;</value>
  </data>
  <data name="ProgramUsageFilters" xml:space="preserve">
    <value>Filtros:
 Duplicati utiliza filtros para incluir ou excluir arquivos.
  Duplicati aplica os filtros onde o primeiro filtro a coincidir com o arquivo determina se ele será incluido ou excluido. Internamente, o Duplicati utiliza expressões regulares, entretanto ele suporte mascaras de arquivos também. A ordem dos argumentos na linha de comando também determina a ordem que os filtros serão aplicados. Exemplo:
    --include=*.txt --exclude=*\Thumbs.db --include=*

  Embora o ultimo filtro inclua todos arquivos, nenhum arquivo chamado "Thumbs.db" será incluido pois este padrão coincide com o filtro de exclusão antes da regra de inclusão. Os caminhos são avaliados de maneira completa, e de maneira relativa à pasta sendo copiada, incluindo a barra inicial. Exemplo:

{0}
  If a folder is excluded, files in that folder are always excluded, even if there are filters that include files in that folder. If a folder is included with a wildcard at the end, all files are included, if the folder is included without a wildcard, files may be excluded or included with extra rules.</value>
  </data>
  <data name="ProgramUsageFindLastVersion" xml:space="preserve">
    <value>Encontrar a última versão de um arquivo:
  Duplicati.CommandLine find-last-version [opções] --file-to-restore=&lt;arquivos a encontrar&gt; &lt;armazenamento&gt;</value>
  </data>
  <data name="ProgramUsageHeader" xml:space="preserve">
    <value>********** Duplicati v. {0} **********

Uso:</value>
  </data>
  <data name="ProgramUsageListContentFiles" xml:space="preserve">
    <value>Listar arquivos (arquivos que podem ser restaurados):
  Duplicati.CommandLine list-current-files [opções] &lt;armazenamento&gt;</value>
  </data>
  <data name="ProgramUsageListFiles" xml:space="preserve">
    <value>Listar arquivos:
  Duplicati.CommandLine list [opções] &lt;armazenamento&gt;</value>
  </data>
  <data name="ProgramUsageListSets" xml:space="preserve">
    <value>Listar backups:
  Duplicati.CommandLine collection-status [opções] &lt;armazenamento&gt;</value>
  </data>
  <data name="ProgramUsageListSignatureFiles" xml:space="preserve">
    <value>Listar arquivos de assinatura (arquivos em um único volume de backup):
  Duplicati.CommandLine list-actual-signature-files [opções] &lt;armazenamento&gt;</value>
  </data>
  <data name="ProgramUsageListSourceFolders" xml:space="preserve">
    <value>List source folders (folders backed up from):
  Duplicati.CommandLine list-source-folders [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageOptionTypes" xml:space="preserve">
    <value>Tipos de opções:
 Os seguintes tipos de opções estão disponíveis:
  Inteiro: um valor numérico
  Booleano: um valor verdade, --force e --force=true são equivalentes. --force=false é o oposto
  Intervalo de tempo: um intervalo de tempo em um formato especial (explicado a seguir)
  Tamanho: um tamanho como 5mb ou 200kb
  Enumeração: qualquer um dos valores listados
  Caminho: o caminho para uma pasta ou arquivo
  Cadeia de caracteres: qualquer outro tipo</value>
  </data>
  <data name="ProgramUsagePurgeCache" xml:space="preserve">
    <value>Apagar cache de assinaturas:
  Duplicati.CommandLine purge-signature-cache [opções]</value>
  </data>
  <data name="ProgramUsageRestore" xml:space="preserve">
    <value>Restaurar (restaurar todos ou alguns arquivos):
  Duplicati.CommandLine [opções] &lt;armazenamento&gt; &lt;pasta de destino&gt;</value>
  </data>
  <data name="ProgramUsageTimes" xml:space="preserve">
    <value>Intervalos de tempo:
 Duplicati utiliza o sistema de tempo do duplicity, onde o mesmo é representado assim:
  1: a palavra "now", indica o tempo atual
  2: o número de segundos depois do epoch, eg: 123456890
  3: uma cadeia de caracteres como "2009-03-26T08:30:00+01:00"
  4: um intervalo, utilizando Y, M, W, D, h, m, s para Ano, Mês, Semana, Dia, hora, minuto ou segundo, ex: "1M4D" para um mês e quatro dias, ou "5m" para cinco minutos.</value>
  </data>
  <data name="ProgramUsageVerify" xml:space="preserve">
    <value>Verificar integridade do backup:
  Duplicati.CommandLine verify &lt;armazenamento&gt; --verification-level=manifest|signatures|full</value>
  </data>
  <data name="SupportedBackendsHeader" xml:space="preserve">
    <value>Protocolos suportados:</value>
  </data>
  <data name="SupportedCompressionModulesHeader" xml:space="preserve">
    <value>Módulos de compressão suportados:</value>
  </data>
  <data name="SupportedEncryptionModulesHeader" xml:space="preserve">
    <value>Módulos de criptografia suportados:</value>
  </data>
  <data name="SupportedOptionsHeader" xml:space="preserve">
    <value>Opções suportadas:</value>
  </data>
  <data name="TimeParseError" xml:space="preserve">
    <value>Não foi possível converter "{0}" em uma variação de tempo: {1}</value>
  </data>
  <data name="UnhandledException" xml:space="preserve">
    <value>Ocorreu um erro: {0}</value>
  </data>
  <data name="UnhandledInnerException" xml:space="preserve">
    <value>A mensagem de erro é: {0}</value>
  </data>
  <data name="UsageExampleLinux" xml:space="preserve">
    <value>Duplicati.CommandLine /home/user/ ftp://host/folder --exclude=/file.txt

  Neste exemplo o arquivo "/home/user/file.txt" é excluido.</value>
  </data>
  <data name="UsageExampleWindows" xml:space="preserve">
    <value>Duplicati.CommandLine C:\Documents\Files ftp://host/folder --exclude=\file.txt

  Neste exemplo o arquivo "C:\Documents\Files\file.txt" é excluido.</value>
  </data>
  <data name="VerificationCompleted" xml:space="preserve">
    <value>Verificação terminada, resumo:
Manifestos verificados: {0}
Assinatura verificadas: {1}
Conteúdo verificado: {2}
Erros: {3}</value>
  </data>
  <data name="VerificationErrorHeader" xml:space="preserve">
    <value>Mensagens de erro reportadas:</value>
  </data>
  <data name="WrongNumberOfCommandsError_v2" xml:space="preserve">
    <value>Esperado {1} mas encontrados {0}, comandos: 
{2}</value>
  </data>
</root>