<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedFoldersHeader" xml:space="preserve">
    <value>Ficheros añadidos</value>
  </data>
  <data name="CollectionStatusHeader" xml:space="preserve">
    <value>Se han encontrado {0} cadenas de copia de seguridad en el backend

Tipo\tTiempo\t\t\tVolumenes\tTamaño</value>
  </data>
  <data name="CollectionStatusLineFull" xml:space="preserve">
    <value>Full\t{0}\t{1}\t{2}</value>
  </data>
  <data name="CollectionStatusLineInc" xml:space="preserve">
    <value> Inc\t{0}\t{1}\t{2}</value>
  </data>
  <data name="ControlFilesHeader" xml:space="preserve">
    <value>Ficheros de control</value>
  </data>
  <data name="DeletedFilesHeader" xml:space="preserve">
    <value>Ficheros borrados</value>
  </data>
  <data name="DeletedFoldersHeader" xml:space="preserve">
    <value>Carpetas borradas</value>
  </data>
  <data name="DuplicatiOptionsHeader" xml:space="preserve">
    <value>Opciones de Duplicati:</value>
  </data>
  <data name="FailedToParseParametersFileError" xml:space="preserve">
    <value>Unable to read the parameters file "{0}", reason: {1}</value>
  </data>
  <data name="FileEntryNotFound" xml:space="preserve">
    <value>&lt; no encontrado &gt;</value>
  </data>
  <data name="FiltersCannotBeUsedWithFileError" xml:space="preserve">
    <value>Filters cannot be specified on the commandline if filters are also present in the parameter file</value>
  </data>
  <data name="FindLastVersionEntry" xml:space="preserve">
    <value>{0}\t{1}</value>
  </data>
  <data name="FindLastVersionHeader" xml:space="preserve">
    <value>Backuptime\t\tFilename</value>
  </data>
  <data name="FolderCreatedMessage" xml:space="preserve">
    <value>La carpeta {0} se ha creado</value>
  </data>
  <data name="GenericModulesHeader" xml:space="preserve">
    <value>Módulos genéricos soportados:</value>
  </data>
  <data name="IntegerParseError" xml:space="preserve">
    <value>Imposible de procesar {0} a número</value>
  </data>
  <data name="InternalOptionUsedError" xml:space="preserve">
    <value>Se ha pasado la opción --{0}, pero está reservada para uso interno y no se puede usar en la línea de comandos</value>
  </data>
  <data name="ModifiedFilesHeader" xml:space="preserve">
    <value>Ficheros modificados</value>
  </data>
  <data name="ModuleIsLoadedAutomatically" xml:space="preserve">
    <value>El modulo se carga automáticamente, usa --disable-module para evitarlo</value>
  </data>
  <data name="ModuleIsNotLoadedAutomatically" xml:space="preserve">
    <value>El modulo no se carga automáticamente, usa --disable-module para evitarlo</value>
  </data>
  <data name="NewFilesHeader" xml:space="preserve">
    <value>Nuevos ficheros</value>
  </data>
  <data name="NewOrModifiedFilesHeader" xml:space="preserve">
    <value>Ficheros nuevos/modificados</value>
  </data>
  <data name="ParametersFileOptionLong" xml:space="preserve">
    <value>This option can be used to store some or all of the options given to the commandline client. The file must be a plain text file, UTF-8 encoding is preferred. Each line in the file should be of the format --option=value. The special options --source and --target can be used to override the localpath and the remote destination uri, respectively. The options in this file take precedence over the options provided on the commandline. You cannot specify filters in both the file and on the commandline.</value>
  </data>
  <data name="ParametersFileOptionShort" xml:space="preserve">
    <value>Path to a file with parameters</value>
  </data>
  <data name="ProgramUsageBackend" xml:space="preserve">
    <value>Un &lt;backend&gt; se identifica por una url del tipo ftp://host/ o ssh://server/.
 Usando este sistema, Duplicati puede detectar si quieres hacer una copia de seguridad o restaurar.
 Los comandos de limpieza y borrado no borran ficheros, excepto si se especifica la opción --force, con lo que puedes examinar que ficheros están afectados antes de realmente borrarlos.
 El comando de limpieza no se debería usar excepto si se interrumpió una copia de seguridad y han quedado ficheros parciales. Duplicati te informará de este caso.
 El comando de borrado puede ser usado para borrar sets copias de seguridad cuando existan copias de seguridad más recientes.</value>
  </data>
  <data name="ProgramUsageBackup" xml:space="preserve">
    <value>Copia de seguridad (hacer una copia de seguridad entera o incremental):
  Duplicati.CommandLine [full] [options] &lt;sourcefolder&gt; &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageCleanup" xml:space="preserve">
    <value>Limpieza (limpiar ficheros parciales o sin usar):
  Duplicati.CommandLine [full] [options] &lt;sourcefolder&gt; &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageCreateFolders" xml:space="preserve">
    <value>Crear carpeta (usualmente se hace de forma automática):
  Duplicati.CommandLine [full] [options] &lt;sourcefolder&gt; &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageDeleteOld" xml:space="preserve">
    <value>Borrar copias de seguridad antiguas:
  Duplicati.CommandLine delete-all-but-n-full &lt;number of full backups to keep&gt; [options] &lt;backend&gt;
  Duplicati.CommandLine delete-older-than &lt;max allowed age&gt; [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageFilters" xml:space="preserve">
    <value>Filters:
 Duplicati uses filters to include and exclude files.
  Duplicati uses a "first-touch" filter where the first rule that matches a file determines if the file is included or excluded. Internally Duplicati uses regular expression filters, but supports filters in the form of filename globbing. The order of the commandline arguments also determine what order they are applied in. An example:
    --include=*.txt --exclude=*\Thumbs.db --include=*

  Even though the last filter includes everything, no files named "Thumbs.db" are included because they match the exclude rule before the include rule. Paths are evaluated in full, and as paths that are relative to folder being backed up, but including a leading slash. An example:

{0}
  If a folder is excluded, files in that folder are always excluded, even if there are filters that include files in that folder. If a folder is included with a wildcard at the end, all files are included, if the folder is included without a wildcard, files may be excluded or included with extra rules.</value>
  </data>
  <data name="ProgramUsageFindLastVersion" xml:space="preserve">
    <value>Encontrar la última versión de un fichero:
  Duplicati.CommandLine find-last-version [options] --file-to-restore=&lt;files to find&gt; &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageHeader" xml:space="preserve">
    <value>********** Duplicati v. {0} **********

Uso:</value>
  </data>
  <data name="ProgramUsageListContentFiles" xml:space="preserve">
    <value>Listar contenido (ficheros que se pueden restaurar):
  Duplicati.CommandLine list-current-files [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageListFiles" xml:space="preserve">
    <value>Listar ficheros:
  Duplicati.CommandLine list [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageListSets" xml:space="preserve">
    <value>Listar sets de copia de seguridad:
  Duplicati.CommandLine collection-status [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageListSignatureFiles" xml:space="preserve">
    <value>Listar ficheros de firma (ficheros en un único set de copia de seguridad):
  Duplicati.CommandLine list-actual-signature-files [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageListSourceFolders" xml:space="preserve">
    <value>List source folders (folders backed up from):
  Duplicati.CommandLine list-source-folders [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageOptionTypes" xml:space="preserve">
    <value>Option types:
 The following option types are available:
  Integer: a numerical value
  Boolean: a truth value, --force and --force=true are equivalent. --force=false is the opposite
  Timespan: a time in the special time format (explained below)
  Size: a size like 5mb or 200kb
  Enumeration: any of the listed values
  Path: the path to a folder or file
  String: any other type</value>
  </data>
  <data name="ProgramUsagePurgeCache" xml:space="preserve">
    <value>Purge signature cache:
  Duplicati.CommandLine purge-signature-cache [options]</value>
  </data>
  <data name="ProgramUsageRestore" xml:space="preserve">
    <value>Restore (restore all or some files):
  Duplicati.CommandLine [options] &lt;backend&gt; &lt;destinationfolder&gt;</value>
  </data>
  <data name="ProgramUsageTimes" xml:space="preserve">
    <value>Times:
 Duplicati uses the time system from duplicity, where times may be presented as:
  1: the string "now", indicating the current time
  2: the number of seconds after epoch, eg: 123456890
  3: a string like "2009-03-26T08:30:00+01:00"
  4: an interval string, using Y, M, W, D, h, m, s for Year, Month, Week, Day, hour, minute or second, eg: "1M4D" for one month and four days, or "5m" for five minutes.</value>
  </data>
  <data name="ProgramUsageVerify" xml:space="preserve">
    <value>Verify backup integrity:
  Duplicati.CommandLine verify &lt;backend&gt; --verification-level=manifest|signatures|full</value>
  </data>
  <data name="SupportedBackendsHeader" xml:space="preserve">
    <value>Supported backends:</value>
  </data>
  <data name="SupportedCompressionModulesHeader" xml:space="preserve">
    <value>Supported compression modules:</value>
  </data>
  <data name="SupportedEncryptionModulesHeader" xml:space="preserve">
    <value>Supported encryption modules:</value>
  </data>
  <data name="SupportedOptionsHeader" xml:space="preserve">
    <value>Opciones soportadas:</value>
  </data>
  <data name="TimeParseError" xml:space="preserve">
    <value>Unable to parse "{0}" into a time offset: {1}</value>
  </data>
  <data name="UnhandledException" xml:space="preserve">
    <value>Ha ocurrido un error: {0}</value>
  </data>
  <data name="UnhandledInnerException" xml:space="preserve">
    <value>The inner error message is: {0}</value>
  </data>
  <data name="UsageExampleLinux" xml:space="preserve">
    <value>Duplicati.CommandLine /home/user/ ftp://host/folder --exclude=/file.txt

  In this example the file "/home/user/file.txt" is excluded.</value>
  </data>
  <data name="UsageExampleWindows" xml:space="preserve">
    <value>Duplicati.CommandLine C:\Documents\Files ftp://host/folder --exclude=\file.txt

  In this example the file "C:\Documents\Files\file.txt" is excluded.</value>
  </data>
  <data name="VerificationCompleted" xml:space="preserve">
    <value>Verification completed, summary:
Manifest files verified: {0}
Signature files verified: {1}
Content files verified: {2}
Errors: {3}</value>
  </data>
  <data name="VerificationErrorHeader" xml:space="preserve">
    <value>Reported error messages:</value>
  </data>
  <data name="WrongNumberOfCommandsError_v2" xml:space="preserve">
    <value>Found {0} commands but expected {1}, commands: 
{2}</value>
  </data>
</root>