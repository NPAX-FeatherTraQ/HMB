<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateFolderError" xml:space="preserve">
    <value>Impossible de créer le répertoire: "{0}", Message d'erreur: {1}</value>
  </data>
  <data name="DeletedFilenameError" xml:space="preserve">
    <value>Une erreur est apparue lors de la détermination de l’état du fichier: {0}, dans le répertoire:{1}</value>
  </data>
  <data name="DeleteFileError" xml:space="preserve">
    <value>Impossible de supprimer le fichier: "{0}", Message d'erreur: {1}</value>
  </data>
  <data name="DeleteFolderError" xml:space="preserve">
    <value>Impossible de supprimer le répertoire: "{0}", Message d'erreur: {1}</value>
  </data>
  <data name="FileProcessError" xml:space="preserve">
    <value>Impossible de traiter le fichier: {0}. Message d'erreur: {1}</value>
  </data>
  <data name="FileToDeleteMissingError" xml:space="preserve">
    <value>Le fichier devant être supprimé n'existe pas: {0}</value>
  </data>
  <data name="FolderToDeleteMissingError" xml:space="preserve">
    <value>Le répertoire devant être supprimé n'existe pas: </value>
  </data>
  <data name="MultipassUsageError" xml:space="preserve">
    <value>Le système de passes multiples n'est pas initialisé</value>
  </data>
  <data name="RestoreFileError" xml:space="preserve">
    <value>Impossible de restaurer le fichier: "{0}", Message d'erreur: {1}</value>
  </data>
  <data name="RestoreFolderDeltaError" xml:space="preserve">
    <value>Le répertoire à restaurer par comparaison n'existe pas: {0}</value>
  </data>
  <data name="RestoreFolderMissingError" xml:space="preserve">
    <value>Le répertoire à restaurer n'existe pas: {0}</value>
  </data>
  <data name="FileShouldBePartialError" xml:space="preserve">
    <value>Le fichier {0} était marqué comme partiel lors d'une sauvegarde précédente, mais ne l'est plus dans celle-ci</value>
  </data>
  <data name="InvalidPartialFileEntry" xml:space="preserve">
    <value>L'enregistrement du fichier partiel pour {0} ne correspond pas au fichier</value>
  </data>
  <data name="InvalidPartialRecordError" xml:space="preserve">
    <value>Le fichier partiellement enregistré est invalide</value>
  </data>
  <data name="PartialFileAddedLogMessage" xml:space="preserve">
    <value>Le fichier {0} est incomplet depuis l'octet {1}</value>
  </data>
  <data name="PartialFileIncompleteWarning" xml:space="preserve">
    <value>Le fichier partiel {0} n'a pas été complété</value>
  </data>
  <data name="PartialLeftoverDeleteError" xml:space="preserve">
    <value>Impossible de nettoyer le fichier incomplet {0}, Message d'erreur: {1}</value>
  </data>
  <data name="InternalPathMappingError" xml:space="preserve">
    <value>Une erreur interne est survenue. Le répertoire {0} n'est un sous répertoire d'aucun répertoire source: {1}.</value>
  </data>
  <data name="SnapshotFailedError" xml:space="preserve">
    <value>Impossible de créer un cliché instantané: {0}</value>
  </data>
  <data name="FailedToSetFileWriteTime" xml:space="preserve">
    <value>Impossible de mettre à jour la date de modification du fichier: {0}.
Message d'erreur: {1}</value>
  </data>
  <data name="FailedToSetFolderWriteTime" xml:space="preserve">
    <value>Impossible de mettre à jour la date de modification du répertoire: {0}.
Message d'erreur: {1}</value>
  </data>
  <data name="UsnDisposeFailedWarning" xml:space="preserve">
    <value>Impossible de se passer de l'utilisation des numéros USN: {0}</value>
  </data>
  <data name="UsnFailedError" xml:space="preserve">
    <value>Impossible de lire les données USN: {0}</value>
  </data>
  <data name="UsnJournalIdChangedWarning" xml:space="preserve">
    <value>Le journal de suivis des modifications de fichiers USN signale que le volume {0} a été modifié de {1} à {2}: effectue une comparaison complète des fichiers</value>
  </data>
  <data name="UsnNotSupportedOnLinuxError" xml:space="preserve">
    <value>USN (Update Sequence Number) n'est pas supporté sur Linux</value>
  </data>
  <data name="UsnNumberingFaultWarning" xml:space="preserve">
    <value>Le numéro USN enregistré pour le volume {0} est {1}, mais le le numéro USN courant est {2}: effectue une comparaison complète de fichiers</value>
  </data>
  <data name="FileChangedWhileReadError" xml:space="preserve">
    <value>Le fichier {0} à changé alors qu'il allait être sauvegardé, il est ignoré</value>
  </data>
  <data name="FileChangedWhileReadWarning" xml:space="preserve">
    <value>Le fichier {0} à changé alors qu'il allait être sauvegardé, il risque d'apparaitre endommagé sur la sauvegarde</value>
  </data>
  <data name="FolderModificationTimeReadError" xml:space="preserve">
    <value>Impossible de lire la date de modification du fichier: {0}.
Message d'erreur: {1}</value>
  </data>
  <data name="InvalidTimeStampError" xml:space="preserve">
    <value>Les information sur la date et l'heure du fichier {0} ne peuvent pas être lues: {1}</value>
  </data>
  <data name="SymlinkReadError" xml:space="preserve">
    <value>The symlink information for {0} could not be read: {1}</value>
  </data>
  <data name="InvalidRelFilenameError" xml:space="preserve">
    <value>Invalid filename detected: {0}, source folders: {1}, error message: {2}</value>
  </data>
</root>